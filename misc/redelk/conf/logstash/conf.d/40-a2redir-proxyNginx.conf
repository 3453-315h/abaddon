input {
  beats {
    port => 5044
    #ssl => true
    #ssl_certificate => "/etc/logstash/certs/elkserver.crt"
    #ssl_key => "/etc/logstash/certs/elkserver.key"
    client_inactivity_timeout => 72000
    #ssl_handshake_timeout => 30000
  }
}

# filter {
#   if [infralogtype] == "a2redir" {
#     
#     # now matching the real haproxy lines. We have several log line formats we need to match:
#     # - Lines with 'message repeated X times'
#     # - normal line, looks like 'Sep 28 09:15:33 $HOSTNAME  haproxy[442]: frontend:www-https/$HOSTNAME/$SOMEIP:443 backend:cobaltstrike client:$SOMEIP:51809 GMT:28/Sep/2018:07:15:33 +0000 body:- request:GET $SOMEURI HTTP/1.1
#     # - Cutoff line as log line is longer than our logging buffer    
#     grok {
#       match => { "message" => [ "\[%{HTTPDATE:haproxy_timestamp}\] scenario:%{WORD:attackscenario} client:%{IPORHOST:src_ip} redir:%{IPORHOST:dst_ip} domain:%{IPORHOST:redir_host} (?:\"%{WORD:verb} %{URIPATHPARAM:request} HTTP/%{NUMBER:httpversion}\"|\".*\") %{NUMBER:response} (?:%{NUMBER:bytes}|-) (?:\"(?:%{URI:referrer}|-)\"|%{QS:referrer}) \"(?<haproxy_useragent>(.*))\"" ] }
#     }
# 
#     # Set the timestamp from the log to @timestamp, example: 15/Apr/2018:19:22:31 +0000
#     date {
#       match => [ "haproxy_timestamp", "dd/MMM/yyyy:HH:mm:ss Z" ]
#       target => "@timestamp"
#       timezone => "UTC"
#     }
# 
# 
#     # Add data to the src_ip
#     if [src_ip] {
#       # duplicate field so we can replace it with reverse DNS lookup
#       mutate {
#         add_field => { "src_dns" => "%{src_ip}" }
#       }
#       # do reverse DNS lookup
#       dns {
#         reverse => ["src_dns"]
#         action => "replace"
#         timeout => "2.0"
#       }
#       # add geo ip info from City DB
#       geoip {
#         source => "src_ip"
#         database => "/usr/share/logstash/GeoLite2-dbs/GeoLite2-City.mmdb"
#       }
#       # add geo ip info from ASN DB
#       geoip { 
#         source => "src_ip" 
#         default_database_type => "ASN"
#         database => "/usr/share/logstash/GeoLite2-dbs/GeoLite2-ASN.mmdb"
#       }
#     }
#   }
# }
# 

filter {
   if [type] in [ "apache" , "apache_access" , "apache-access" ]  {
      grok {
         match => [
         "message" , "%{COMBINEDAPACHELOG}+%{GREEDYDATA:extra_fields}",
         "message" , "%{COMMONAPACHELOG}+%{GREEDYDATA:extra_fields}"
         ]
         overwrite => [ "message" ]
      }
      mutate {
         convert => ["response", "integer"]
         convert => ["bytes", "integer"]
         convert => ["responsetime", "float"]
         add_field => { "src_dns" => "%{clientip}" }
      }
      # do reverse DNS lookup
      dns {
         reverse => [ "src_dns" ] 
         action => "replace"
         timeout => "2.0"
      }
      # add geo ip info from City DB
      geoip {
         source => "clientip"
         database => "/usr/share/logstash/GeoLite2-dbs/GeoLite2-City.mmdb"
      }
      # add geo ip info from ASN DB
      geoip { 
         source => "clientip" 
         default_database_type => "ASN"
         database => "/usr/share/logstash/GeoLite2-dbs/GeoLite2-ASN.mmdb"
      }
      date {
         match => [ "timestamp" , "dd/MMM/YYYY:HH:mm:ss Z" ]
         remove_field => [ "timestamp" ]
      }
      useragent {
         source => "agent"
      }
   }
   if [type] in ["apache_error","apache-error"] {
      grok {
         match => ["message", "\[%{WORD:dayname} %{WORD:month} %{DATA:day} %{DATA:hour}:%{DATA:minute}:%{DATA:second} %{YEAR:year}\] \[%{NOTSPACE:loglevel}\] (?:\[client %{IPORHOST:clientip}\] ){0,1}%{GREEDYDATA:message}"]
         overwrite => [ "message" ]
      }
      mutate
      {
         add_field =>
         {
            "time_stamp" => "%{day}/%{month}/%{year}:%{hour}:%{minute}:%{second}"
         }
      }
      date {
         match => ["time_stamp", "dd/MMM/YYYY:HH:mm:ss"]
         remove_field => [ "time_stamp","day","dayname","month","hour","minute","second","year"]
      }
   }
}

output {
    elasticsearch{
        hosts => ["elasticsearch:9200"]
        sniffing => true
        manage_template => false
        index => "apache-%{+YYYY.MM.dd}"
    }
    #stdout { codec => rubydebug }
    #file {
    #  path => "/logs/logstashout.txt"
    #}
}
